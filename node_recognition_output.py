# -*- coding: utf-8 -*-
"""node recognition output.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_BVZtgI2a6joEUE93KAEfqb1HJgugSNH

https://docs.opencv.org/3.4/d4/dc6/tutorial_py_template_matching.html
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/UWO/CS4442/group/symbols template/list output
import cv2 as cv
import numpy as np
from matplotlib import pyplot as plt
!ls

import cv2 as cv
import numpy as np
import math

def checkDistance(coordinates, new_coordinate, min_distance):
    for existing_coordinate in coordinates:
        if math.dist(existing_coordinate, new_coordinate) < min_distance:
            return False
    return True

def checkCollision_List(pt, pt_w, pt_h, lst, list_element_w, list_element_h):
    for element_pt in lst:
        if (
            (pt[0] < (element_pt[0] + list_element_w))
            and ((pt[0] + pt_w) > element_pt[0])
            and (pt[1] < (element_pt[1] + list_element_h))
            and ((pt[1] + pt_h) > element_pt[1])
        ):
            return True
    return False

def match_template_and_store(output_list, image_path, templates, name, threshold):
    img_rgb = cv.imread(image_path)
    assert img_rgb is not None, f"File {image_path} could not be read, check with os.path.exists()"
    img_gray = cv.cvtColor(img_rgb, cv.COLOR_BGR2GRAY)

    for template_name in templates:
        template = cv.imread(template_name, cv.IMREAD_GRAYSCALE)
        assert template is not None, f"File {template_name} could not be read, check with os.path.exists()"
        w, h = template.shape[::-1]
        res = cv.matchTemplate(img_gray, template, cv.TM_CCOEFF_NORMED)
        loc = np.where(res >= threshold)

        for pt in zip(*loc[::-1]):
            # Check distance and collision before appending
            if (
                checkDistance([coord[0] for coord in output_list], pt, 10)
                and not checkCollision_List(
                    pt, w, h, [coord[0] for coord in output_list], w, h
                )
            ):
                output_list.append(((pt[0], pt[1]), name, None))
                cv.rectangle(img_rgb, pt, (pt[0] + w, pt[1] + h), (0, 0, 255), 2)

    #cv.imwrite(f'{name}_matched.png', img_rgb)

    return output_list




def match_no_collision_check(output_list, image_path, template_names, name, threshold):
    img_rgb = cv.imread(image_path)
    assert img_rgb is not None, f"File {image_path} could not be read, check with os.path.exists()"
    img_gray = cv.cvtColor(img_rgb, cv.COLOR_BGR2GRAY)

    for template_name in template_names:
        template = cv.imread(template_name, cv.IMREAD_GRAYSCALE)
        assert template is not None, f"File {template_name} could not be read, check with os.path.exists()"
        w, h = template.shape[::-1]
        res = cv.matchTemplate(img_gray, template, cv.TM_CCOEFF_NORMED)
        loc = np.where(res >= threshold)

        found = set()  # To store unique matches

        for pt in zip(*loc[::-1]):
            x, y = pt[0], pt[1]
            # Check if the coordinate is part of a new match
            if all((x - x0) ** 2 + (y - y0) ** 2 > 100 for x0, y0 in found):
                output_list.append(((x, y), name, None))
                found.add((x, y))  # Store the first coordinate of the match

    return output_list

"""# time signatures"""

time_signiture_list = []
match_template_and_store(time_signiture_list, 'FinalImage.png', ['44c.png'], '4/4c time', 0.95) #threshold = 0.9-0.95
match_template_and_store(time_signiture_list, 'FinalImage.png', ['22.png'], '2/2c time', 0.95) #threshold = 0.8-0.9
match_template_and_store(time_signiture_list, 'FinalImage.png', ['24.png'], '2/4 time', 0.95) #threshold = 0.9-0.95
match_template_and_store(time_signiture_list, 'FinalImage.png', ['34.png'], '3/4 time', 0.95) #threshold = 0.9-0.95
match_template_and_store(time_signiture_list, 'FinalImage.png', ['38.png'], '3/8 time', 0.95) #threshold = 0.9-0.95
match_template_and_store(time_signiture_list, 'FinalImage.png', ['44.png'], '4/4 time', 0.9) #threshold = 0.8-0.95
match_template_and_store(time_signiture_list, 'FinalImage.png', ['68.png'], '6/8 time', 0.9) #threshold = 0.8-0.95

for result in time_signiture_list:
    print(result)

"""# clefs"""

clef_list = []
match_template_and_store(clef_list, 'FinalImage.png', ['treble.png'], 'treble', 0.7) #threshold = 0.5-0.9
match_template_and_store(clef_list, 'FinalImage.png', ['bass.png'], 'bass', 0.7) #threshold = 0.5-0.9

for result in clef_list:
    print(result)

"""# accidentals"""

accidental_list = []
match_no_collision_check(accidental_list, 'FinalImage.png', ['sharp.png'], 'sharp', 0.7) #threshold = 0.6-0.7
match_no_collision_check(accidental_list, 'FinalImage.png', ['flat.png'], 'flat', 0.7) #threshold = 0.6-0.7
match_no_collision_check(accidental_list, 'FinalImage.png', ['natual.png'], 'natual', 0.7) #threshold = 0.7-0.8

for result in accidental_list:
    print(result)

"""#rests



"""

rest_list = []
match_template_and_store(rest_list, 'FinalImage.png', ['whole half rest.png'], 'whole half rest', 0.9) #threshold = 0.8-0.95
match_template_and_store(rest_list, 'FinalImage.png', ['quarter rest.png'], 'quarter rest', 0.7) #threshold = 0.6-0.9
match_template_and_store(rest_list, 'FinalImage.png', ['eighth rest.png'], 'eighth rest', 0.7) #threshold = 0.7-0.9
match_no_collision_check(rest_list, 'FinalImage.png', ['sixteenth rest.png'], 'sixteenth rest', 0.7) #threshold = 0.7-0.9

for result in rest_list:
    print(result)

"""#notes"""

note_list = []
match_template_and_store(note_list, 'FinalImage.png', ['whole note.png'], 'whole note', 0.7) #threshold = 0.7-0.9
match_template_and_store(note_list, 'FinalImage.png', ['half note.png'], 'half note', 0.8) #threshold = 0.8-0.85
match_template_and_store(note_list, 'FinalImage.png', ['quarter note1.png', 'quarter note2.png'], 'quarter note', 0.9) #threshold = 0.9

match_template_and_store(note_list, 'FinalImage.png', ['eighth note1l.png', 'eighth note1r.png', 'eighth note2l.png', 'eighth note2r.png','eighth note.png'], 'eighth note', 0.8) #threshold = 0.8
match_template_and_store(note_list, 'FinalImage.png', ['sixteen note1l.png', 'sixteen note1r.png', 'sixteen note2l.png', 'sixteen note2r.png','sixteen note.png'], 'sixteen note', 0.7) #threshold = 0.7


for result in note_list:
    print(result)

"""#list concatenate"""

note_recognition_result = []
note_recognition_result.extend(time_signiture_list)
note_recognition_result.extend(clef_list)
note_recognition_result.extend(accidental_list)
note_recognition_result.extend(rest_list)
note_recognition_result.extend(note_list)

for result in note_recognition_result:
    print(result)